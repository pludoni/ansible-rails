#!/usr/bin/env puma
# {{ ansible_managed }}

environment ENV['RAILS_ENV'] || 'production'

directory "{{ puma_directory }}"
rackup "{{ puma_rackup }}"
pidfile "{{ puma_pidfile }}"

{% for typ,v in puma_binds.items() | list %}
bind "{{ typ }}://{{ v }}"
{% endfor %}

preload_app!

workers Integer(ENV['PUMA_WORKERS'] || {{ puma_workers }})
threads Integer(ENV['MIN_THREADS']  || {{ puma_thread_min }}), Integer(ENV['MAX_THREADS'] || {{ puma_thread_max }})

stdout_redirect '{{ puma_access_log }}', '{{ puma_error_log }}', true

on_restart do
  puts 'Refreshing Gemfile'
  ENV["BUNDLE_GEMFILE"] = "{{ puma_gemfile }}"
end

before_fork do
  if defined?(::ActiveRecord) && defined?(::ActiveRecord::Base)
    ActiveRecord::Base.connection_pool.disconnect!
  end
end

on_worker_boot do
  if defined?(::ActiveRecord) && defined?(::ActiveRecord::Base)
    ActiveRecord::Base.establish_connection
  end
  if defined?(CustomPumaConfig) && CustomPumaConfig.respond_to?(:on_worker_boot)
    begin
      CustomPumaConfig.on_worker_boot
    rescue Exception
      STDERR.puts "Error while loading custom puma config\n#{$!.message}\n\t#{$!.backtrace.join("\n\t")}".gsub(/^$\n/, '')
    end
  end
end
